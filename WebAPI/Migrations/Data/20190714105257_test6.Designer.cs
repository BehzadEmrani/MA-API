// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models.Entits;

namespace WebAPI.Migrations.Data
{
    [DbContext(typeof(DataContext))]
    [Migration("20190714105257_test6")]
    partial class test6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebAPI.Models.Entits.Instrumexts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Comment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Instrumexts");
                });

            modelBuilder.Entity("WebAPI.Models.Entits.LocationArtistPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Commented")
                        .HasMaxLength(150);

                    b.Property<string>("FullAddress")
                        .HasMaxLength(150);

                    b.Property<int>("Instrumext");

                    b.Property<string>("LocationE")
                        .HasMaxLength(50);

                    b.Property<string>("LocationN")
                        .HasMaxLength(50);

                    b.Property<bool>("SingleSinging");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("TimeChange");

                    b.Property<bool>("TimeFree");

                    b.Property<int>("TypeMusicLocal");

                    b.Property<string>("Village")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Instrumext");

                    b.HasIndex("TypeMusicLocal");

                    b.ToTable("LocationArtistPerformances");
                });

            modelBuilder.Entity("WebAPI.Models.Entits.TypeMusicLocal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Comment");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TypeMusicLocals");
                });

            modelBuilder.Entity("WebAPI.Models.Entits.LocationArtistPerformance", b =>
                {
                    b.HasOne("WebAPI.Models.Entits.Instrumexts", "Instrumexts")
                        .WithMany("LocationArtistPerformances")
                        .HasForeignKey("Instrumext")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.Entits.TypeMusicLocal", "TypeMusicLocals")
                        .WithMany("LocationArtistPerformances")
                        .HasForeignKey("TypeMusicLocal")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
